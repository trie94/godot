#!/usr/bin/env python

Import("env")
Import("env_modules")

env_swappy = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_swappy"]:
    thirdparty_dir = "#thirdparty/swappy/src/"
    thirdparty_sources = [
        "swappy/common/CpuInfo.cpp",
        "swappy/common/Thread.cpp",
        "swappy/common/SwappyDisplayManager.cpp",
        "swappy/common/SwappyCommon.cpp",
        "swappy/common/ChoreographerFilter.cpp",
        "swappy/common/CPUTracer.cpp",
        "swappy/common/Settings.cpp",
        "swappy/common/swappy_c.cpp",
        "swappy/common/ChoreographerThread.cpp",
        "swappy/vulkan/SwappyVk.cpp",
        "swappy/vulkan/SwappyVkFallback.cpp",
        "swappy/vulkan/SwappyVkGoogleDisplayTiming.cpp",
        "swappy/vulkan/SwappyVkBase.cpp",
        "swappy/vulkan/swappyVk_c.cpp",
        "swappy/opengl/FrameStatisticsGL.cpp",
        "swappy/opengl/swappyGL_c.cpp",
        "swappy/opengl/SwappyGL.cpp",
        "swappy/opengl/EGL.cpp",
        "common/apk_utils.cpp",
        "common/system_utils.cpp",
        "common/jni/jni_helper.cpp",
        "common/jni/jnictx.cpp",
        "common/jni/jni_wrap.cpp",
    ]
    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]
    env_swappy.Append(CPPPATH=[thirdparty_dir + "common"])
    env_swappy.Append(CPPPATH=[thirdparty_dir + "swappy/common"])
    env_swappy.Append(CPPPATH=[thirdparty_dir + "swappy/vulkan"])
    env_swappy.Append(CPPPATH=[thirdparty_dir + "swappy/opengl"])
    env_swappy.Append(CPPPATH=[thirdparty_dir + "../include"])
    env_swappy.Prepend(CPPPATH=[thirdparty_dir])

    env_thirdparty = env_swappy.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
    env.modules_sources += thirdparty_obj

# Godot source files

module_obj = []

env_swappy.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
